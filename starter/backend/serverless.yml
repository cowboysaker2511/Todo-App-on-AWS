service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    TODO_ATTACHMENTS_S3_BUCKET: todo-attachments-bucket-trungvq8-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH0_CERTIFICATE: '-----BEGIN CERTIFICATE-----
MIIDHTCCAgWgAwIBAgIJeXIDal4QnCrQMA0GCSqGSIb3DQEBCwUAMCwxKjAoBgNV
BAMTIWRldi12eW5pMHZsM2V4Z3BiMmVuLnVzLmF1dGgwLmNvbTAeFw0yNDA1MDgw
OTQ1MzNaFw0zODAxMTUwOTQ1MzNaMCwxKjAoBgNVBAMTIWRldi12eW5pMHZsM2V4
Z3BiMmVuLnVzLmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
ggEBAMngHPwd2gkT+jnQmGnk/Rb8qr1D0dit5iEev2G9ZnduiqgjVtpb+2nRoVOL
WXkG4tMOkxYQHwWeAQAscntZ5PSMWYVDl2E900CFmPMwwp7xKnZRt439lgL3EyNf
R45NMqoD/Wl/NmCaFkQ9KiMqkPJ7LUZlUZ8DlHIrPZw3UyeD0VXuSB2M007NCXt5
5iiFrfOr9lHF5etee1UhxM7/LKrddHv61q+eZL9kayzWASbrcjQ/e9E34TQYo/sE
p6Ybm0sJEmkGJjCJ4cdzJlfT2c4hdlr0QznN4HaYoxwy7rNmHa90bh7JrnrsoA7h
n+47wWcKIE7+7FrfNiequf80aCcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAd
BgNVHQ4EFgQUxGIP3IT86lizxeMkTauwJf+MeEAwDgYDVR0PAQH/BAQDAgKEMA0G
CSqGSIb3DQEBCwUAA4IBAQC/SFVxWLs+BDA4j7jxe60uIRVGN3clMXqML8Bd2uro
7idT83NVnOFtMQNvF6TbqcySGcP3opY0e0cB81sCdnj+kIBFqESq4M/8ehKlZ9Ms
weSzOpvFyPPMLd9BQ+YHJBygOc+oCxbssDnJF4Ke5rmvo8BaxVuJuH00Syag5qcI
nCheqaGUky3doHMbRz2lTk70f5lXAlf5pyuLj82Iy6K3iZB9stGiMpNoBZRK4Sw7
0NuYI/apuVir0TSyaKhXVmLU0OcLI7upPORC9k1LI6oRuWEX5EFRcykgnyqUc/3Y
vs3WaxRrMMgKv25oBmYxb9dRJc+65+tSy+lA24ceovzp
-----END CERTIFICATE-----'

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource:
            - "*"

functions:
  Auth:
    handler: src/lambda/auth/Auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/GetTodos.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt TodosTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/CreateTodo.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: todos
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/CreateTodoRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/UpdateTodo.handler
    events:
      - http:
          authorizer: Auth
          method: patch
          path: todos/{todoId}
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/UpdateTodoRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosTable.Arn

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/DeleteTodo.handler
    events:
      - http:
          authorizer: Auth
          method: delete
          path: todos/{todoId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt TodosTable.Arn

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/GenerateUploadUrl.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: todos/{todoId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosTable.Arn
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}/*
resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: TodoAttachmentBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: arn:aws:s3:::${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}/*
        Bucket: !Ref AttachmentsBucket